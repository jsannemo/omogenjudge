syntax = "proto3";

package omogen.problemtools;

import "google/protobuf/timestamp.proto";
import "runner/api/eval.proto";
import "runner/api/program.proto";

// A problem parsed from a folder.
message Problem {
  // Metadata about the problem.
  Metadata metadata = 1;
  ProblemStatements statements = 2;
  // All test groups that were present in the problem.
  // They have no particular order.
  repeated TestGroup test_groups = 3;
  repeated omogen.runner.Program input_validators = 4;
  omogen.runner.Program output_validator = 5;
  repeated Submission submissions = 6;
  repeated IncludedFiles included_files = 7;
}

message IncludedFiles {
  string language_id = 1;
  map<string, string> file_contents = 2;
}

// Problem metadata is things relating to the problem, such as judging limits,
// sources, etc.
message Metadata {
  string problem_id = 1;
  Limits limits = 2;
  string author = 3;
  License license = 4;
  string source = 5;
  google.protobuf.Timestamp public_from = 6;
}

message ProblemStatements {
  // All statements that were present in the problem.
  // They have no particular order.
  repeated ProblemStatement statements = 1;
  // Files that should be made for inclusion in the problem statement.
  // Mapping from public file path to the file path in the system containing the file.
  map<string, string> statement_files = 2;
  // Files that should be listed as attachments available for download.
  // Mapping from public file path to the file path in the system containing the file.
  map<string, string> attachments = 3;
}

// A parsed problem statement, possibly in any language.
message ProblemStatement {
  // A language code, either just a language ("en") or a language with a
  // variation ("en-US")
  string language_code = 1;

  // The title of the problem statement.
  string title = 2;

  // The parsed HTML of the problem statement.
  string statement_html = 3;
}

// A test case group containing a set of testcases.
message TestGroup {
  // The test group name of the group, for example "samples".
  string name = 1;
  // Whether the cases of this group should be publically displayed in the
  // judge.
  bool public_samples = 2;
  // The test cases that this group consists of.
  repeated TestCase tests = 3;
  // The score given for this group.
  int32 score = 4;
  // Flags to be given to the input validator for cases in this group.
  map<string, string> input_flags = 5;
  // Flags to be given to the output validator for cases in this group.
  map<string, string> output_flags = 6;
}

// A single test case.
message TestCase {
  // The name of the test case, for example "001-random".
  string name = 1;
  // The full name of the test case, for example "samples/001-random"
  string full_name = 4;
  // An absolute path to the input file of the case.
  string input_path = 2;
  // An absolute path to the output file of the case.
  string output_path = 3;
}

// The judging limits of the problem.
message Limits {
  // The time limit for executing a test case in milliseconds.
  int32 time_limit_ms = 1;
  // The memory limit for executing a test case in megabytes.
  int32 memory_limit_kb = 2;
  // A multiplier used when setting the time limit. If time_limit_ms is unset,
  // the time limit is instead set to be the slowest solution used for timing
  // times this multiplier.
  int32 time_limit_multiplier = 3;
}

// Constraints that a submission must fulfill.
message SubmissionConstraint {
  int32 expected_score = 1;
  // Verdicts that a submission must display in at least one test case.
  repeated omogen.runner.Verdict required_failures = 2;
  // Verdicts that a submission is allowed to receive. Accepted is
  // always implicitly allowed.
  repeated omogen.runner.Verdict allowed_failures = 3;
}

message Submission {
  omogen.runner.Program submission = 1;
  SubmissionConstraint constraint = 2;
  // Whether this submission should be used for setting time limits or not.
  bool use_for_timing = 3;
  string name = 4;
}

enum License {
  LICENSE_UNSPECIFIED = 0;
  CC_BY_SA_3 = 1;
  PUBLIC_DOMAIN = 2;
  BY_PERMISSION = 3;
  PRIVATE = 4;
}
