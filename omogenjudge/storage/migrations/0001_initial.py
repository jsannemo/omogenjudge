# Generated by Django 4.1 on 2022-09-04 18:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import omogenjudge.storage.models.contests
import omogenjudge.storage.models.langauges
import omogenjudge.storage.models.problems
import omogenjudge.storage.models.submissions
import omogenjudge.util.django_fields
import omogenjudge.util.serialization


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('account_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', omogenjudge.util.django_fields.TextField(unique=True)),
                ('full_name', omogenjudge.util.django_fields.TextField()),
                ('email', omogenjudge.util.django_fields.TextField(unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'account',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('contest_id', models.AutoField(primary_key=True, serialize=False)),
                ('short_name', omogenjudge.util.django_fields.TextField(unique=True)),
                ('title', omogenjudge.util.django_fields.TextField()),
                ('host_name', omogenjudge.util.django_fields.TextField(blank=True, null=True)),
                ('only_virtual_contest', models.BooleanField(default=False)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField()),
                ('flexible_start_window_end_time', models.DateTimeField(blank=True, null=True)),
                ('scoring_type', omogenjudge.util.django_fields.EnumField(enum_type=omogenjudge.storage.models.contests.ScoringType)),
                ('public_scoreboard', models.BooleanField(default=False)),
                ('allow_registration', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'contest',
            },
        ),
        migrations.CreateModel(
            name='ContestGroup',
            fields=[
                ('contest_group_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', omogenjudge.util.django_fields.TextField()),
                ('short_name', omogenjudge.util.django_fields.TextField()),
                ('description', omogenjudge.util.django_fields.TextField(blank=True, null=True)),
                ('homepage', omogenjudge.util.django_fields.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'contest_group',
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('problem_id', models.AutoField(primary_key=True, serialize=False)),
                ('short_name', omogenjudge.util.django_fields.TextField(unique=True)),
                ('author', django.contrib.postgres.fields.ArrayField(base_field=omogenjudge.util.django_fields.TextField(), size=None)),
                ('source', omogenjudge.util.django_fields.TextField()),
                ('license', omogenjudge.util.django_fields.EnumField(enum_type=omogenjudge.storage.models.problems.License)),
            ],
            options={
                'db_table': 'problem',
            },
            bases=(omogenjudge.util.django_fields.PrefetchIDMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProblemGrader',
            fields=[
                ('problem_grader_id', models.AutoField(primary_key=True, serialize=False)),
                ('run_command', django.contrib.postgres.fields.ArrayField(base_field=omogenjudge.util.django_fields.TextField(), size=None)),
            ],
            options={
                'db_table': 'problem_grader',
            },
        ),
        migrations.CreateModel(
            name='ProblemOutputValidator',
            fields=[
                ('problem_output_validator_id', models.AutoField(primary_key=True, serialize=False)),
                ('run_command', django.contrib.postgres.fields.ArrayField(base_field=omogenjudge.util.django_fields.TextField(), size=None)),
                ('scoring_validator', models.BooleanField()),
            ],
            options={
                'db_table': 'problem_output_validator',
            },
        ),
        migrations.CreateModel(
            name='ProblemTestcase',
            fields=[
                ('problem_testcase_id', models.AutoField(primary_key=True, serialize=False)),
                ('testcase_name', omogenjudge.util.django_fields.TextField()),
            ],
            options={
                'db_table': 'problem_testcase',
            },
        ),
        migrations.CreateModel(
            name='ProblemTestgroup',
            fields=[
                ('problem_testgroup_id', models.AutoField(primary_key=True, serialize=False)),
                ('testgroup_name', omogenjudge.util.django_fields.TextField()),
                ('min_score', models.FloatField(null=True)),
                ('max_score', models.FloatField(null=True)),
                ('accept_score', models.FloatField(null=True)),
                ('reject_score', models.FloatField(null=True)),
                ('break_on_reject', models.BooleanField()),
                ('output_validator_flags', django.contrib.postgres.fields.ArrayField(base_field=omogenjudge.util.django_fields.TextField(), size=None)),
                ('scoring_mode', omogenjudge.util.django_fields.EnumField(enum_type=omogenjudge.storage.models.problems.ScoringMode)),
                ('verdict_mode', omogenjudge.util.django_fields.EnumField(enum_type=omogenjudge.storage.models.problems.VerdictMode)),
                ('accept_if_any_accepted', models.BooleanField()),
                ('ignore_sample', models.BooleanField()),
                ('grader_flags', django.contrib.postgres.fields.ArrayField(base_field=omogenjudge.util.django_fields.TextField(), size=None)),
                ('custom_grading', models.BooleanField()),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='storage.problemtestgroup')),
            ],
            options={
                'db_table': 'problem_testgroup',
            },
        ),
        migrations.CreateModel(
            name='ProblemVersion',
            fields=[
                ('problem_version_id', models.AutoField(primary_key=True, serialize=False)),
                ('time_limit_ms', models.IntegerField()),
                ('memory_limit_kb', models.IntegerField()),
                ('included_files', models.JSONField(decoder=omogenjudge.storage.models.problems.IncludedFilesDecoder, encoder=omogenjudge.util.serialization.DataclassJsonEncoder)),
                ('scoring', models.BooleanField()),
                ('interactive', models.BooleanField()),
                ('score_maximization', models.BooleanField(null=True)),
                ('custom_grader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='storage.problemgrader')),
                ('output_validator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='storage.problemoutputvalidator')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.problem')),
                ('root_group', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.problemtestgroup')),
            ],
            options={
                'db_table': 'problem_version',
            },
            bases=(omogenjudge.util.django_fields.PrefetchIDMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StoredFile',
            fields=[
                ('file_hash', models.CharField(max_length=256, primary_key=True, serialize=False)),
                ('file_contents', models.BinaryField()),
            ],
            options={
                'db_table': 'stored_file',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('submission_id', models.AutoField(primary_key=True, serialize=False)),
                ('language', omogenjudge.util.django_fields.EnumField(enum_type=omogenjudge.storage.models.langauges.Language)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('submission_files', models.JSONField(decoder=omogenjudge.storage.models.submissions.SubmissionFilesDecoder, encoder=omogenjudge.util.serialization.DataclassJsonEncoder)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'submission',
            },
            bases=(omogenjudge.util.django_fields.PrefetchIDMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.AutoField(primary_key=True, serialize=False)),
                ('team_name', omogenjudge.util.django_fields.TextField(null=True)),
                ('team_data', models.JSONField(blank=True, default=dict)),
                ('contest_start_time', models.DateTimeField(blank=True, null=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.contest')),
            ],
            options={
                'db_table': 'team',
            },
        ),
        migrations.CreateModel(
            name='SubmissionRun',
            fields=[
                ('submission_run_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('status', omogenjudge.util.django_fields.EnumField(enum_type=omogenjudge.storage.models.submissions.Status)),
                ('verdict', omogenjudge.util.django_fields.EnumField(enum_type=omogenjudge.storage.models.submissions.Verdict)),
                ('time_usage_ms', models.IntegerField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('compile_error', omogenjudge.util.django_fields.TextField(blank=True, null=True)),
                ('problem_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.problemversion')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.submission')),
            ],
            options={
                'db_table': 'submission_run',
            },
        ),
        migrations.CreateModel(
            name='SubmissionGroupRun',
            fields=[
                ('submission_group_run_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('time_usage_ms', models.IntegerField()),
                ('score', models.FloatField()),
                ('verdict', omogenjudge.util.django_fields.EnumField(enum_type=omogenjudge.storage.models.submissions.Verdict)),
                ('problem_testgroup', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.problemtestgroup')),
                ('submission_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_runs', to='storage.submissionrun')),
            ],
            options={
                'db_table': 'submission_group_run',
            },
        ),
        migrations.CreateModel(
            name='SubmissionCaseRun',
            fields=[
                ('submission_case_run_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('time_usage_ms', models.IntegerField()),
                ('score', models.FloatField()),
                ('verdict', omogenjudge.util.django_fields.EnumField(enum_type=omogenjudge.storage.models.submissions.Verdict)),
                ('problem_testcase', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.problemtestcase')),
                ('submission_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.submissionrun')),
            ],
            options={
                'db_table': 'submission_case_run',
            },
        ),
        migrations.AddField(
            model_name='submission',
            name='current_run',
            field=models.ForeignKey(db_column='current_run', on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.submissionrun'),
        ),
        migrations.AddField(
            model_name='submission',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.problem'),
        ),
        migrations.AddField(
            model_name='problemtestgroup',
            name='problem_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testgroups', to='storage.problemversion'),
        ),
        migrations.AddField(
            model_name='problemtestcase',
            name='input_file',
            field=models.ForeignKey(db_column='input_file_hash', on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.storedfile'),
        ),
        migrations.AddField(
            model_name='problemtestcase',
            name='output_file',
            field=models.ForeignKey(db_column='output_file_hash', on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.storedfile'),
        ),
        migrations.AddField(
            model_name='problemtestcase',
            name='problem_testgroup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.problemtestgroup'),
        ),
        migrations.AddField(
            model_name='problemoutputvalidator',
            name='validator_zip',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.storedfile'),
        ),
        migrations.AddField(
            model_name='problemgrader',
            name='grader_zip',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.storedfile'),
        ),
        migrations.AddField(
            model_name='problem',
            name='current_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.problemversion'),
        ),
        migrations.CreateModel(
            name='ContestProblem',
            fields=[
                ('contest_problem_id', models.AutoField(primary_key=True, serialize=False)),
                ('label', omogenjudge.util.django_fields.TextField(blank=True, null=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.contest')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.problem')),
            ],
            options={
                'db_table': 'contest_problem',
                'unique_together': {('contest', 'problem')},
            },
        ),
        migrations.CreateModel(
            name='ContestGroupContest',
            fields=[
                ('contest_group_contest_id', models.AutoField(primary_key=True, serialize=False)),
                ('label', omogenjudge.util.django_fields.TextField()),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_contests', to='storage.contest')),
                ('contest_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_contests', to='storage.contestgroup')),
            ],
            options={
                'db_table': 'contest_group_contest',
                'unique_together': {('contest', 'contest_group')},
            },
        ),
        migrations.AddField(
            model_name='contestgroup',
            name='contests',
            field=models.ManyToManyField(through='storage.ContestGroupContest', to='storage.contest'),
        ),
        migrations.AddField(
            model_name='contestgroup',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='storage.contestgroup'),
        ),
        migrations.AddField(
            model_name='contest',
            name='problems',
            field=models.ManyToManyField(through='storage.ContestProblem', to='storage.problem'),
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('team_member_id', models.AutoField(primary_key=True, serialize=False)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.team')),
            ],
            options={
                'db_table': 'team_member',
                'unique_together': {('team', 'account')},
            },
        ),
        migrations.CreateModel(
            name='ProblemStatementFile',
            fields=[
                ('problem_statement_file_id', models.AutoField(primary_key=True, serialize=False)),
                ('file_path', omogenjudge.util.django_fields.TextField()),
                ('attachment', models.BooleanField()),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.problem')),
                ('statement_file', models.ForeignKey(db_column='statement_file_hash', on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='storage.storedfile')),
            ],
            options={
                'db_table': 'problem_statement_file',
                'unique_together': {('problem', 'file_path')},
            },
        ),
        migrations.CreateModel(
            name='ProblemStatement',
            fields=[
                ('problem_statement_id', models.AutoField(primary_key=True, serialize=False)),
                ('language', omogenjudge.util.django_fields.TextField()),
                ('title', omogenjudge.util.django_fields.TextField()),
                ('html', omogenjudge.util.django_fields.TextField()),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statements', to='storage.problem')),
            ],
            options={
                'db_table': 'problem_statement',
                'unique_together': {('problem', 'language')},
            },
        ),
        migrations.CreateModel(
            name='ContestStaff',
            fields=[
                ('contest_staff_id', models.AutoField(primary_key=True, serialize=False)),
                ('can_administer_contest', models.BooleanField()),
                ('can_answer_clarifications', models.BooleanField()),
                ('can_see_submissions', models.BooleanField()),
                ('can_register_teams', models.BooleanField()),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.contest')),
            ],
            options={
                'db_table': 'contest_staff',
                'unique_together': {('contest', 'account')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='contestgroup',
            unique_together={('contest_group_id', 'short_name')},
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('username'), name='unique_case_insensitive_username'),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('email'), name='unique_case_insensitive_email'),
        ),
    ]
